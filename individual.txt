package individualka4;
import java.util.*;
public class Individualka4 {

    public static void main(String[] args) {
        MyFrame frame =  new MyFrame();
    }
}

package individualka4;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


import javax.swing.*;
public class MyPanel extends JPanel{
    JLabel name, number, year, search;
    JTextField tname, tnumber, tyear, searchname, index, delname;
    JTextArea area;
    JButton addButton, delButton, searchButton, sortNameButton, sortYearButton;
    HistoricMuseum hm = new HistoricMuseum();
    MyPanel() {
        setLayout(new BorderLayout());
        
        JPanel Panel1 = new JPanel();
        
        name = new JLabel("Название");
        Panel1.add(name);
        tname = new JTextField();
        tname.setColumns(14);
        Panel1.add(tname);
        
        number = new JLabel("Номер");
        Panel1.add(number);
        tnumber = new JTextField();
        tnumber.setColumns(5);
        Panel1.add(tnumber);
        
        year = new JLabel("Год");
        Panel1.add(year);
        tyear = new JTextField();
        tyear.setColumns(8);
        Panel1.add(tyear);
        
        addButton = new JButton("Добавить экспонат");
        addButton.addActionListener(e -> {
            String s1 = tname.getText();
            int s2 = Integer.parseInt(tnumber.getText());
            int s3 = Integer.parseInt(tyear.getText());
            Exhibit exh = new Exhibit(s1, s2, s3);
            hm.add(exh);
            tname.setText("");
            tnumber.setText("");
            tyear.setText("");
        });
        Panel1.add(addButton);
        
        add(Panel1, BorderLayout.NORTH);
   
        JPanel Panel2 = new JPanel();
        delButton = new JButton("Удалить экспонат");
        delButton.addActionListener(e -> {
            String s1 = name.getText();
            int ind = hm.search(s1);
            if (ind > -1)  hm.delete(s1);
            tname.setText("");
            tnumber.setText("");
            tyear.setText("");
        });
        Panel2.add(delButton);

        delname = new JTextField();
        delname.setColumns(10);
        Panel2.add(delname);
        add(Panel2);
        
        JPanel Panel3 = new JPanel();
        
        search = new JLabel("Поиск по названию:");
        Panel3.add(search);
        searchname = new JTextField();
        searchname.setColumns(10);
        Panel3.add(searchname);
        
        searchButton = new JButton("Найти экспонат");
        searchButton.addActionListener(e -> {
            String s1 = searchname.getText();
            int ind = hm.search(s1);
            if (ind > -1) index.setText(String.valueOf(ind+1));
            else index.setText("Экспонат не найден");
        });
        Panel3.add(searchButton);
        
        index = new JTextField();
        index.setColumns(10);
        Panel3.add(index);
        
        add(Panel3, BorderLayout.CENTER);
        
        JPanel Panel4 = new JPanel();
        area =  new JTextArea();
        area.setRows(10);
        area.setColumns(30);
        area.setBackground(Color.pink);
        Panel4.add(area);
        
        add(Panel4, BorderLayout.SOUTH);
        
        JPanel Panel5 = new JPanel();
        sortNameButton = new JButton("Сортировать по имени");
        sortNameButton.addActionListener(e -> {
            hm.sortByName();
            area.setText(hm.print());

        });
        Panel5.add(sortNameButton);
        
        sortYearButton = new JButton("Сортировать по году");
        sortYearButton.addActionListener(e -> {
            hm.sortByYear();
            area.setText(hm.print());
        });
        Panel5.add(sortYearButton);   
        
        add(Panel5, BorderLayout.EAST);
    }
         
}

package individualka4;
import javax.swing.*;
import java.awt.BorderLayout;
public class MyFrame extends JFrame{
    MyFrame() {
        setSize(700, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        MyPanel panel = new MyPanel();
        add(panel);
        setVisible(true);
    }
}

package individualka4;
import java.util.*;
public class HistoricMuseum {
    ArrayList<Exhibit> a;
    HistoricMuseum() {
        a = new ArrayList<Exhibit>();
    }
    public ArrayList<Exhibit> getA() {
        return a;
    }
    //поиск
    int search(String name){
        int p = -1;
        for(int i = 0; i < a.size(); i++)
            if (name.equalsIgnoreCase(a.get(i).getName())) p = i;
        return p;
    }
    //добавление
    public void add(Exhibit e) {
        a.add(e);
    }
    //удаление
    public void delete(String name){
        int p = search(name);
        if (p > -1){
            a.remove(p);
            System.out.println("exhibit " + p + " is delete");
        }
        else System.out.println("no such exhibit");
    }
    public void sortByName(){
        a.sort(Exhibit.NameComparator);
    }
    public void sortByYear(){
        a.sort(Exhibit.YearComparator);
    }
    public String print() {
        String s = "";
        for(int i = 0; i < a.size(); i++) {
            s += a.get(i).toString();
            s += "\n";
        }
        return s;
    }
}

package individualka4;
import java.util.*;
public class Exhibit {
    private String name;
    private int number, year;
    Exhibit(String name, int number, int year) {
        this.name = name;
        this.number = number;
        this.year = year;
    }
    public String getName() {
        return this.name;
    }
    public int getYear() {
        return this.year;
    }
    public String toString() {
        return "экспонат №" + number + ": " + name + " (" + year + " г.)";
    }
    public static Comparator<Exhibit> NameComparator = new Comparator<Exhibit>() {
        public int compare(Exhibit e1, Exhibit e2){
            return e1.getName().compareTo(e2.getName());
        }
    };
    public static Comparator<Exhibit> YearComparator = new Comparator<Exhibit>() {
        public int compare(Exhibit e1, Exhibit e2){
            return e1.getYear()-e2.getYear();
        }
    };
}

#include <iostream>
#include <omp.h>
using namespace std;
int main()
{
    setlocale(LC_ALL, "rus");
    int s = 0, i, n;
    #pragma omp parallel private(i, n) reduction(+:s)
    {
        n = omp_get_thread_num();
        #pragma omp for
        for (i = 1; i < 10; i++)
        {
            s = s + i;
            cout << "нить " << n << " сложила элементы с номером " << i << endl;
        }
        cout << s << endl;
    }
    return 0;
}

#include <iostream>
#include <omp.h>
using namespace std;
int main()
{
    setlocale(LC_ALL, "rus");
    omp_set_num_threads(4);
    int i;
    #pragma omp parallel private(i)
    {
        #pragma omp for schedule (static)
        #pragma omp for schedule (staticб 1)
        #pragma omp for schedule (staticб 2)
        #pragma omp for schedule (dynamic)
        #pragma omp for schedule (dynamic, 2)
        #pragma omp for schedule (guided)
        #pragma omp for schedule (guided, 2)
        for (i = 1; i < 10; i++)
        {
            cout << "нить " << omp_get_thread_num() << " выполнила итерацию " << i << endl;
        }
    }
    return 0;
}
