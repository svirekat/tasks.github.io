package setapplication;
import java.util.*;
public class SetApplication {

    public static void main(String[] args) {
        TreeSet<Integer> set = new TreeSet<Integer>();
        MySet myset = new MySet(set);
        myset.fillSet();
        myset.print();
        MySet simple = myset.simple();
        System.out.println("new set: ");
        simple.print();
        TreeSet<Integer> s = new TreeSet<Integer>();
        MySet ms = new MySet(s);
        ms.fillSet();
        MySet union = myset.union(ms);
        System.out.println("Union: ");
        union.print();
    }
    
}

package setapplication;
import java.util.*;
public class MySet {
    TreeSet<Integer> set;
    MySet(TreeSet<Integer> set) {
        this.set = set;
    }
    TreeSet<Integer> getSet() {
        return set;
    }
    void fillSet() {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter elements of set: ");
        int x  = sc.nextInt();
        while (x != 0) {
            set.add(x);
            x = sc.nextInt();
        }
    }
    void print() {
        Iterator it = set.iterator();
        while(it.hasNext()) {
            System.out.print(it.next() + " ");
        }
        System.out.println();
    }
    MySet simple() {
        TreeSet<Integer> set1 = new TreeSet<Integer>(set);
        Iterator it = set1.iterator();
        while(it.hasNext()) {
            int k = 0;
            Integer x = (Integer) it.next();
            for(int i = 1; i <= x; i++)
                if (x % i == 0) k++;
            if (k == 2) it.remove();
        }
        return new MySet(set1);
    }
    
    MySet union(MySet a) {
        TreeSet<Integer> set1 = a.getSet();
        TreeSet<Integer> res = new TreeSet<Integer>(set);
        Iterator it = set1.iterator();
        while(it.hasNext())
            res.add((Integer)it.next());
        return new MySet(res);
    }
}


package djen;
public class Djen {

    public static void main(String[] args) {
        Integer []m1 = {1, 2, 3, 4, 5};
        Mass<Integer> mi = new Mass<>(m1);
        try {
            System.out.println("\n" + mi.elemByInd(3));
            mi.print();
            mi.chast(2);
        }
        catch(ArrayIndexOutOfBoundsException e) {
            System.out.println(e.getMessage());
        }
        Double []m2 = {1.1, 2.2, 3.3, 4.4, 5.5 };
        Mass<Double> md = new Mass<>(m2);
        try {
            System.out.println("\n" + md.elemByInd(3));
            md.print();
            md.chast(2);
        }
        catch(ArrayIndexOutOfBoundsException e) {
            System.out.println(e.getMessage());
        }
        String []m3 = {"123", "234", "345"};
        Mass<String> ms = new Mass<>(m3);
        try {
            System.out.println("\n" + ms.elemByInd(2));
            ms.print();
            ms.chast(5);
        }
        catch(ArrayIndexOutOfBoundsException e) {
            System.out.println(e.getMessage());
        }
    }
    
}

package djen;

class Mass<T> {
    T []a;
    Mass(T []a) {
        this.a=a.clone();
    }
    void print() {
        System.out.println("massive:");
        for(int i=0; i < a.length; i++)
            System.out.print(a[i] + " ");
        System.out.println();
    }
    T elemByInd(int i) throws ArrayIndexOutOfBoundsException {
        if (i < 0 || i > a.length)
            throw new ArrayIndexOutOfBoundsException ("exit out of bounds!!!!!!!!!!!!!!😡😡😡😡😡😡😡");
        return a[i];
    }
    void chast(int p) throws ArrayIndexOutOfBoundsException {
        if (p < 0 || p > a.length)
            throw new ArrayIndexOutOfBoundsException ("exit out of bounds!!!!!!!!!!!!!!😈👿🐫🐠🦐👀🛴");
         for(int i=0; i <p; i++)
            System.out.print(a[i] + " ");
    }
}

package mylinkedlist;

public class MyLinkedList {

    public static void main(String[] args) {
        MyList l = new MyList();
        l.createlist();
        System.out.println("List: ");
        l.print();
        System.out.println();
        System.out.println("List reversed: ");
        l.print_reverse();
        l.del("111");
        System.out.println("List: ");
        l.print();
    }
    
}
package mylinkedlist;
import java.util.*;
public class MyList {
    LinkedList<String> list;
    MyList() {
        list = new LinkedList<String>();
    }
    void createlist() {
        String s;
        Scanner sc = new Scanner(System.in);
        s = sc.nextLine();
        while(!s.equals("")) {
            list.addLast(s);
            s = sc.nextLine();
        }
    }
    
    void print() {
        ListIterator<String> it = list.listIterator();
        while (it.hasNext()) {
            System.out.println(it.next());
        }
    }
    void print_reverse() {
        ListIterator<String> it = list.listIterator(list.size());
        while (it.hasPrevious()) {
            System.out.println(it.previous());
        }
    }
    
    void del(String s) {
        ListIterator<String> it = list.listIterator();
        while (it.hasNext()) {
            if (it.next().equals(s))
                it.remove();
        }
    }
    public boolean isSym() {
        boolean flag = true;
        ListIterator<String> it = list.listIterator();
        ListIterator<String> it2 = list.listIterator(list.size());
        while (it.hasNext() && it2.hasPrevious()) {
            if (!it.next().equals(it2.previous()))
                flag = false;
        }
        return flag;
    }
}
