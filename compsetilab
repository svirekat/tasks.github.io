//server
#include <winsock2.h>
#include <iostream>
#include <string>
#include <thread>
#include <mutex>
#pragma comment (lib, "Ws2_32.lib")

using namespace std;

const int PORT = 666;
const int BUFFER_SIZE = 1024;

mutex mtx; // Mutex для синхронизации доступа к стандартному выводу

// Функция для обработки клиента
void handleClient(SOCKET client_socket) {
    char buffer[BUFFER_SIZE];
    int bytesReceived;

    // Приветственное сообщение
    const char* welcomeMessage = "Добро пожаловать!\n";
    send(client_socket, welcomeMessage, strlen(welcomeMessage), 0);

    while ((bytesReceived = recv(client_socket, buffer, BUFFER_SIZE - 1, 0)) > 0) {
        buffer[bytesReceived] = '\0'; // Завершаем строку
        mtx.lock();
        cout << "Получено сообщение: " << buffer << endl; // Печатаем сообщение
        mtx.unlock();

        // Отправляем ответ обратно клиенту
        send(client_socket, buffer, bytesReceived, 0);
    }

    // Закрываем сокет клиента
    closesocket(client_socket);
    mtx.lock();
    cout << "Клиент отключился." << endl;
    mtx.unlock();
}

int main() {
    setlocale(LC_ALL, "rus");
    WSADATA wsaData;
    SOCKET serverSocket, clientSocket;
    sockaddr_in serverAddr, clientAddr;
    int clientAddrSize = sizeof(clientAddr);

    // Инициализация WSA
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cerr << "WSAStartup failed: " << WSAGetLastError() << endl;
        return 1;
    }

    // Создание сокета
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == INVALID_SOCKET) {
        cerr << "Socket creation failed: " << WSAGetLastError() << endl;
        WSACleanup();
        return 1;
    }

    // Привязка сокета к адресу
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY; // Принимаем соединения со всех интерфейсов
    serverAddr.sin_port = htons(PORT);

    if (bind(serverSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        cerr << "Bind failed: " << WSAGetLastError() << endl;
        closesocket(serverSocket);
        WSACleanup();
        return 1;
    }

    // Начинаем слушать входящие соединения
    if (listen(serverSocket, SOMAXCONN) == SOCKET_ERROR) {
        cerr << "Listen failed: " << WSAGetLastError() << endl;
        closesocket(serverSocket);
        WSACleanup();
        return 1;
    }

    cout << "Ожидание подключения клиентов..." << endl;

    // Основной цикл сервера
    while (true) {
        // Принятие нового соединения
        clientSocket = accept(serverSocket, (sockaddr*)&clientAddr, &clientAddrSize);
        if (clientSocket == INVALID_SOCKET) {
            cerr << "Accept failed: " << WSAGetLastError() << endl;
            continue;
        }

        // Создание потока для обработки клиента
        thread(handleClient, clientSocket).detach(); // Удаляем ненужное ключевое слово client_thread
        mtx.lock();
        cout << "Клиент подключён." << endl;
        mtx.unlock();
    }

    // Закрываем серверный сокет и очищаем WSA
    closesocket(serverSocket);
    WSACleanup();
    return 0;
}


//client
#include <winsock2.h>
#include <ws2tcpip.h> // Дополнительный заголовок для inet_pton
#include <iostream>
#include <string>
#pragma comment (lib, "Ws2_32.lib")

using namespace std;

const int PORT = 666;
const char* SERVER_ADDR = "127.0.0.1";
const int BUFFER_SIZE = 1024;
void SetConsoleColor(int color) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, color);
}

int main() {
    setlocale(LC_ALL, "rus");
    WSADATA wsaData;
    SOCKET clientSocket;
    sockaddr_in serverAddr;
    char buffer[BUFFER_SIZE];

    // Инициализация WSA
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cerr << "WSAStartup failed: " << WSAGetLastError() << endl;
        return 1;
    }

    // Создание сокета
    clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == INVALID_SOCKET) {
        cerr << "Socket creation failed: " << WSAGetLastError() << endl;
        WSACleanup();
        return 1;
    }

    // Настройка адреса сервера
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);

    // Используем inet_pton для преобразования IP-адреса
    if (inet_pton(AF_INET, SERVER_ADDR, &serverAddr.sin_addr) <= 0) {
        cerr << "Invalid address: " << SERVER_ADDR << endl;
        closesocket(clientSocket);
        WSACleanup();
        return 1;
    }

    // Подключение к серверу
    if (connect(clientSocket, (sockaddr*)&serverAddr, sizeof(serverAddr)) != 0) {
        cerr << "Connection failed: " << WSAGetLastError() << endl;
        closesocket(clientSocket);
        WSACleanup();
        return 1;
    }

    cout << "Клиент подключился к серверу. Введите 'exit' для выхода.\n";

    while (true) {
        SetConsoleColor(FOREGROUND_BLUE | FOREGROUND_INTENSITY);
        cout << "Введите сообщение: ";
        string message;
        getline(cin, message);
        SetConsoleColor(FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);
        // Если клиент вводит "exit", завершаем работу
        if (message == "exit") {
            break;
        }

        // Отправка сообщения серверу
        send(clientSocket, message.c_str(), message.length(), 0);

        // Получение ответа от сервера
        int bytesReceived = recv(clientSocket, buffer, sizeof(buffer) - 1, 0);
        if (bytesReceived > 0) {
            buffer[bytesReceived] = '\0'; // Завершаем строку
            SetConsoleColor(FOREGROUND_GREEN | FOREGROUND_INTENSITY);
            cout << "Сервер: " << buffer << endl;
        }
        SetConsoleColor(FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);
    }

    // Закрываем сокет и очищаем WSA
    closesocket(clientSocket);
    WSACleanup();
    return 0;
}
